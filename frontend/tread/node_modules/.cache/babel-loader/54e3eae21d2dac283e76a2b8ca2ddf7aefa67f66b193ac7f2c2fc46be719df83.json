{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rebek\\\\Documents\\\\Stuff I want to Keep\\\\Coding\\\\Tread-Frontend\\\\frontend\\\\tread\\\\src\\\\components\\\\Profile\\\\MedalsScroll.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport MedalObj from './MedalObj';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MedalsScroll = props => {\n  _s();\n  let [type] = useState(props.children.type);\n  let [informationMap, setInformationMap] = useState([]);\n  function getProgressMedals() {\n    // ask for progress medals\n    // move to needed format\n    let info = [{\n      \"description\": \"Run 100 Miles\",\n      \"done\": 79,\n      \"total\": 100\n    }, {\n      \"description\": \"Try 5 types of exercise\",\n      \"done\": 3,\n      \"total\": 5\n    }, {\n      \"description\": \"Make a friend\",\n      \"done\": 0,\n      \"total\": 1\n    }, {\n      \"description\": \"Swim 5 days in one week\",\n      \"done\": 3,\n      \"total\": 5\n    }, {\n      \"description\": \"Join a leauge\",\n      \"done\": 0,\n      \"total\": 1\n    }];\n    setInformationMap(info);\n  }\n  function getEarnedMedals() {\n    // ask for earned medals\n    // move to needed format\n    let info = [{\n      \"description\": \"Complete a Challenge\",\n      \"date\": \"09-04-2022\"\n    }, {\n      \"description\": \"Add a sensor\",\n      \"date\": \"10-05-2022\"\n    }, {\n      \"description\": \"Try Weighlifting!\",\n      \"date\": \"01-12-2022\"\n    }, {\n      \"description\": \"Jog 5 times\",\n      \"date\": \"10-31-2022\"\n    }, {\n      \"description\": \"Swim 100 km\",\n      \"date\": \"01-26-2022\"\n    }];\n    setInformationMap(info);\n  }\n  function createObj(input) {\n    if (type === \"earned\") {\n      console.log(\"return the earned medals\");\n      return /*#__PURE__*/_jsxDEV(MedalObj, {\n        date: input[\"date\"],\n        description: input[\"description\"],\n        ifEarned: ifEarned\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 20\n      }, this);\n    } else {\n      console.log(\"return the progress medals\");\n      return /*#__PURE__*/_jsxDEV(MedalObj, {\n        done: input[\"done\"],\n        total: input[\"total\"],\n        description: input[\"description\"],\n        ifEarned: ifEarned\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 20\n      }, this);\n    }\n  }\n  useEffect(() => {\n    if (type === \"earned\") {\n      console.log(\"Loads the earned medals\");\n      getEarnedMedals();\n    } else if (type === \"progress\") {\n      console.log(\"loads the progress medals\");\n      getProgressMedals();\n    }\n  }, [ifEarned]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"MedalsScroll\",\n    children: informationMap.map(createObj)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 9\n  }, this);\n};\n_s(MedalsScroll, \"ItFdmv4/DlnXma/l83/oatXRexc=\");\n_c = MedalsScroll;\nexport default MedalsScroll;\nvar _c;\n$RefreshReg$(_c, \"MedalsScroll\");","map":{"version":3,"names":["useState","useEffect","MedalObj","MedalsScroll","props","type","children","informationMap","setInformationMap","getProgressMedals","info","getEarnedMedals","createObj","input","console","log","ifEarned","map"],"sources":["C:/Users/rebek/Documents/Stuff I want to Keep/Coding/Tread-Frontend/frontend/tread/src/components/Profile/MedalsScroll.js"],"sourcesContent":["import {useState, useEffect} from 'react';\r\nimport MedalObj from './MedalObj';\r\nconst MedalsScroll = (props) => {\r\n    let [type] = useState(props.children.type);\r\n    let [informationMap, setInformationMap] = useState([]);\r\n\r\n    function getProgressMedals(){\r\n        // ask for progress medals\r\n        // move to needed format\r\n        let info = [\r\n            {\"description\": \"Run 100 Miles\", \"done\": 79, \"total\": 100},\r\n            {\"description\": \"Try 5 types of exercise\", \"done\": 3, \"total\": 5},\r\n            {\"description\": \"Make a friend\", \"done\": 0, \"total\": 1},\r\n            {\"description\": \"Swim 5 days in one week\", \"done\": 3, \"total\": 5},\r\n            {\"description\": \"Join a leauge\", \"done\": 0, \"total\": 1},\r\n        ]\r\n        setInformationMap(info);\r\n    }\r\n\r\n    function getEarnedMedals(){\r\n        // ask for earned medals\r\n        // move to needed format\r\n        let info = [\r\n            {\"description\": \"Complete a Challenge\", \"date\": \"09-04-2022\"},\r\n            {\"description\": \"Add a sensor\", \"date\": \"10-05-2022\"},\r\n            {\"description\": \"Try Weighlifting!\", \"date\": \"01-12-2022\"},\r\n            {\"description\": \"Jog 5 times\", \"date\": \"10-31-2022\"},\r\n            {\"description\": \"Swim 100 km\", \"date\": \"01-26-2022\"},\r\n        ];\r\n        setInformationMap(info);\r\n    }\r\n\r\n\r\n    function createObj(input){\r\n        if(type === \"earned\"){\r\n            console.log(\"return the earned medals\");\r\n            return(<MedalObj date = {input[\"date\"]} description = {input[\"description\"]} ifEarned = {ifEarned}></MedalObj>);\r\n        }\r\n        else{\r\n            console.log(\"return the progress medals\");\r\n            return(<MedalObj done = {input[\"done\"]} total = {input[\"total\"]} description = {input[\"description\"]} ifEarned = {ifEarned}></MedalObj>);\r\n        }\r\n    }\r\n\r\n    useEffect(\r\n        () => {\r\n          if (type === \"earned\") {\r\n            console.log(\"Loads the earned medals\");\r\n            getEarnedMedals();\r\n          }\r\n          else if(type === \"progress\"){\r\n            console.log(\"loads the progress medals\");\r\n            getProgressMedals();\r\n          }\r\n        }, [ifEarned]\r\n      );\r\n    return (\r\n        <div id = \"MedalsScroll\">\r\n            {informationMap.map(createObj)}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MedalsScroll;"],"mappings":";;AAAA,SAAQA,QAAQ,EAAEC,SAAS,QAAO,OAAO;AACzC,OAAOC,QAAQ,MAAM,YAAY;AAAC;AAClC,MAAMC,YAAY,GAAIC,KAAK,IAAK;EAAA;EAC5B,IAAI,CAACC,IAAI,CAAC,GAAGL,QAAQ,CAACI,KAAK,CAACE,QAAQ,CAACD,IAAI,CAAC;EAC1C,IAAI,CAACE,cAAc,EAAEC,iBAAiB,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAEtD,SAASS,iBAAiB,GAAE;IACxB;IACA;IACA,IAAIC,IAAI,GAAG,CACP;MAAC,aAAa,EAAE,eAAe;MAAE,MAAM,EAAE,EAAE;MAAE,OAAO,EAAE;IAAG,CAAC,EAC1D;MAAC,aAAa,EAAE,yBAAyB;MAAE,MAAM,EAAE,CAAC;MAAE,OAAO,EAAE;IAAC,CAAC,EACjE;MAAC,aAAa,EAAE,eAAe;MAAE,MAAM,EAAE,CAAC;MAAE,OAAO,EAAE;IAAC,CAAC,EACvD;MAAC,aAAa,EAAE,yBAAyB;MAAE,MAAM,EAAE,CAAC;MAAE,OAAO,EAAE;IAAC,CAAC,EACjE;MAAC,aAAa,EAAE,eAAe;MAAE,MAAM,EAAE,CAAC;MAAE,OAAO,EAAE;IAAC,CAAC,CAC1D;IACDF,iBAAiB,CAACE,IAAI,CAAC;EAC3B;EAEA,SAASC,eAAe,GAAE;IACtB;IACA;IACA,IAAID,IAAI,GAAG,CACP;MAAC,aAAa,EAAE,sBAAsB;MAAE,MAAM,EAAE;IAAY,CAAC,EAC7D;MAAC,aAAa,EAAE,cAAc;MAAE,MAAM,EAAE;IAAY,CAAC,EACrD;MAAC,aAAa,EAAE,mBAAmB;MAAE,MAAM,EAAE;IAAY,CAAC,EAC1D;MAAC,aAAa,EAAE,aAAa;MAAE,MAAM,EAAE;IAAY,CAAC,EACpD;MAAC,aAAa,EAAE,aAAa;MAAE,MAAM,EAAE;IAAY,CAAC,CACvD;IACDF,iBAAiB,CAACE,IAAI,CAAC;EAC3B;EAGA,SAASE,SAAS,CAACC,KAAK,EAAC;IACrB,IAAGR,IAAI,KAAK,QAAQ,EAAC;MACjBS,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;MACvC,oBAAO,QAAC,QAAQ;QAAC,IAAI,EAAIF,KAAK,CAAC,MAAM,CAAE;QAAC,WAAW,EAAIA,KAAK,CAAC,aAAa,CAAE;QAAC,QAAQ,EAAIG;MAAS;QAAA;QAAA;QAAA;MAAA,QAAY;IAClH,CAAC,MACG;MACAF,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;MACzC,oBAAO,QAAC,QAAQ;QAAC,IAAI,EAAIF,KAAK,CAAC,MAAM,CAAE;QAAC,KAAK,EAAIA,KAAK,CAAC,OAAO,CAAE;QAAC,WAAW,EAAIA,KAAK,CAAC,aAAa,CAAE;QAAC,QAAQ,EAAIG;MAAS;QAAA;QAAA;QAAA;MAAA,QAAY;IAC3I;EACJ;EAEAf,SAAS,CACL,MAAM;IACJ,IAAII,IAAI,KAAK,QAAQ,EAAE;MACrBS,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;MACtCJ,eAAe,EAAE;IACnB,CAAC,MACI,IAAGN,IAAI,KAAK,UAAU,EAAC;MAC1BS,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC;MACxCN,iBAAiB,EAAE;IACrB;EACF,CAAC,EAAE,CAACO,QAAQ,CAAC,CACd;EACH,oBACI;IAAK,EAAE,EAAG,cAAc;IAAA,UACnBT,cAAc,CAACU,GAAG,CAACL,SAAS;EAAC;IAAA;IAAA;IAAA;EAAA,QAC5B;AAEd,CAAC;AAAA,GA3DKT,YAAY;AAAA,KAAZA,YAAY;AA6DlB,eAAeA,YAAY;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}